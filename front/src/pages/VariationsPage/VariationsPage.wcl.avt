import { Watcher } from "Aventus@Main:Aventus.package.avt";
import type { Input } from "../../components/form/Input/Input.wcl.avt";
import { PageFull } from "../../components/layout/PageFull/PageFull.wcl.avt";
import type { VariationGroupeTemplateResource } from "../../generated/app/Http/Controllers/VariationGroupeTemplate/VariationGroupeTemplateResource.lib.avt";
import type { VariationGroupe } from "../../generated/app/Models/VariationGroupe.lib.avt";
import { StringTools } from "../../lib/StringTools.lib.avt";
import { VariationGroupeTemplateRAM } from "../../ram/VariationGroupeTemplate.ram.avt";
import { VariationGroupeItem } from "./components/VariationGroupeItem/VariationGroupeItem.wcl.avt";
import { VariationGroupeTemplateEditModal } from "./components/VariationGroupeTemplateEditModal/VariationGroupeTemplateEditModal.wcl.avt";

export class VariationsPage extends PageFull implements Aventus.DefaultComponent {

    //#region static

    //#endregion


    //#region props

    //#endregion


    //#region variables
    public list: VariationGroupeItem[] = [];

    @ViewElement()
    protected listEl!: HTMLDivElement;
    @ViewElement()
    protected searchEl!: Input;
    //#endregion


    //#region constructor

    //#endregion


    //#region methods
    /**
     * @inheritdoc
     */
    public override configure(): Aventus.Asyncable<Aventus.Navigation.Page.PageConfig> {
        return {};
    }

    /**
     * 
     */
    protected search() {
        if(this.searchEl.value) {
            for(let item of this.list) {
                item.visible = StringTools.contains(item.item.nom, this.searchEl.value);
            }
        }
        else {
            for(let item of this.list) {
                item.visible = true;
            }
        }

    }


    /**
     * 
     */
    protected async add() {
        await VariationGroupeTemplateEditModal.open();
    }

    protected async bindData() {
        let list = await VariationGroupeTemplateRAM.getInstance().getList();
        list.sort((a, b) => a.nom.localeCompare(a.nom));

        for(let item of list) {
            let el = new VariationGroupeItem();
            el.item = item;
            el.visible = this.searchEl.value ? StringTools.contains(item.nom, this.searchEl.value) : true;
            this.listEl.appendChild(el);
            this.list.push(el);
        }


        VariationGroupeTemplateRAM.getInstance().onCreated(this.onNewData);
        VariationGroupeTemplateRAM.getInstance().onUpdated(this.onNewData);
        VariationGroupeTemplateRAM.getInstance().onDeleted(this.onRemoveData);
    }

    @BindThis()
    protected onNewData(user: VariationGroupeTemplateResource) {
        let itemBefore: VariationGroupeItem | undefined = undefined;
        for(let item of this.list) {
            if(itemBefore == null && user.nom.localeCompare(item.item.nom) < 0) {
                itemBefore = item;
            }
            if(item.item.id == user.id) {
                item.item = user;
                Watcher.trigger("UPDATED", item.item);
                return;
            }
        }

        let el = new VariationGroupeItem();
        el.item = user;
        el.visible = this.searchEl.value ? StringTools.contains(user.nom, this.searchEl.value) : true;
        if(itemBefore) {
            let index = this.list.indexOf(itemBefore);
            this.list.splice(index, 0, el);
            this.listEl.insertBefore(el, itemBefore);
        }
        else {
            this.list.push(el);
            this.listEl.appendChild(el);
        }


    }

    @BindThis()
    protected onRemoveData(user: VariationGroupeTemplateResource) {
        for(let item of this.list) {
            if(item.item.id == user.id) {
                item.remove();
                let index = this.list.indexOf(item);
                this.list.splice(index, 1);
                return;
            }
        }

    }

    protected override postCreation(): void {
        super.postCreation();
        this.bindData();
    }
    //#endregion

}