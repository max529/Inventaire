import { PageFormRoute } from "Aventus@UI:Aventus.Navigation.package.avt";
import { Required } from "Aventus@UI:Aventus.Form.Validators.package.avt";
import { AuthLoginController } from "../../generated/app/Http/Controllers/Auth/Login/Controller.lib.avt";
import type { Response } from "../../generated/app/Http/Controllers/Auth/Login/Response.lib.avt";
import type { Request } from "../../generated/app/Http/Controllers/Auth/Login/Request.lib.avt";
import { Alert } from "../../components/interaction/Alert/Alert.wcl.avt";

export class LoginPage extends PageFormRoute<typeof AuthLoginController> implements Aventus.DefaultComponent {

    //#region static

    //#endregion


    //#region props

    //#endregion


    //#region variables
    @Watch()
    public error?: string;
    //#endregion


    //#region constructor

    //#endregion


    //#region methods


    /**
     * @inheritdoc
     */
    public override route(): typeof AuthLoginController {
        return AuthLoginController;
    }
    /**
     * @inheritdoc
     */
    public override onResult(result: Aventus.ResultWithError<Response, Aventus.GenericError<any>> | null): Aventus.Asyncable<void> {
        if(result?.result) {
            window.location.href = "/";
        }
    }
    /**
     * @inheritdoc
     */
    protected override formSchema(): Aventus.Form.FormSchema<Request> {
        return {
            nom_utilisateur: new Required("Le nom d'utilisateur est requis"),
            mot_passe: new Required("Le mot de passe est requis"),
        };
    }

    /**
     * @inheritdoc
     */
    public override configure(): Aventus.Asyncable<Aventus.Navigation.Page.PageConfig> {
        return {
            
        };
    }

    protected override formConfig(): Aventus.Form.FormHandlerConfig<Request> {
        return {
            handleExecuteNoInputError: (errors) => {
                if(errors.some(p => p.code == 422)) {
                    this.error = "Informations non valides";
                }
                else {
                    let msg = errors.map(p => p.message.replace(/\n/g, '<br/>')).join("<br/>");
                    Alert.open({
                        title: "Erreur",
                        content: msg,
                    });
                }
            }
        };
    }

    protected clearError() {
        this.error = undefined;
    }
    //#endregion

}