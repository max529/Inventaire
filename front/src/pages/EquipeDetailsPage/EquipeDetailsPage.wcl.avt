import { Confirm } from "../../components/interaction/Confirm/Confirm.wcl.avt";
import { Main } from "../../Main/Main.wcl.avt";
import { EquipeRAM } from "../../ram/Equipe.ram.avt";
import { EquipeEditModal } from "../EquipesPage/components/EquipeEditModal/EquipeEditModal.wcl.avt";
import type { EquipeResource } from "../../generated/app/Http/Controllers/Equipe/EquipeResource.lib.avt";
import { Process } from "Aventus@UI:Aventus.package.avt";
import { EquipeGetInventaireController } from "../../generated/app/Http/Controllers/Equipe/GetInventaire/Controller.lib.avt";
import { Response as Inventaire } from "../../generated/app/Http/Controllers/Equipe/GetInventaire/Response.lib.avt";
import { Watcher } from "Aventus@Main:Aventus.package.avt";
import { EquipeMaterielController } from "../../generated/app/Http/Controllers/Equipe/Materiel/Controller.lib.avt";
import type { MaterielResource } from "../../generated/app/Http/Controllers/Materiel/MaterielResource.lib.avt";
import type { Variation } from "../../generated/app/Models/Variation.lib.avt";
import type { Input } from "../../components/form/Input/Input.wcl.avt";
import type { InventaireEquipeListItem } from "./components/InventaireEquipeListItem/InventaireEquipeListItem.wcl.avt";
import { StringTools } from "../../lib/StringTools.lib.avt";
import { Page } from "../../components/layout/Page/Page.wcl.avt";

export class EquipeDetailsPage extends Page implements Aventus.DefaultComponent {

    //#region static

    //#endregion


    //#region props

    //#endregion


    //#region variables
    @Watch()
    public item!: EquipeResource;

    @Watch()
    public inventaires: Inventaire[] = [];

    @ViewElement()
    protected searchEl!: Input;
    @ViewElement()
    protected listItems!: InventaireEquipeListItem[];
    //#endregion


    //#region constructor

    //#endregion


    //#region methods

    public override async isAllowed(state: Aventus.State, pattern: string): Promise<string | boolean> {
        let slugs = Main.instance.getSlugs(pattern);
        if(!slugs || typeof slugs['id'] != "number")
            return "/";

        const equipe = await EquipeRAM.getInstance().getById(slugs['id']);
        if(!equipe)
            return "/";

        this.item = equipe;



        const result = await this.loadInventaire(equipe.id);
        if(!result) {
            return "/";
        }


        return true;
    }

    protected async loadInventaire(id: number) {
        const materiels = await Process.execute(new EquipeMaterielController().request({ id_equipe: id }));
        if(!materiels) {
            return false;
        }
        const connu = await Process.execute(new EquipeGetInventaireController().request({ id_equipe: id }));
        if(!connu) {
            return false;
        }
        materiels.sort((a, b) => a.nom.localeCompare(b.nom));

        const inventaires: Inventaire[] = [];


        const addInventaire = (materiel: MaterielResource, variation?: Variation) => {
            let el: Inventaire | undefined;
            if(variation) {
                el = connu.find(p => p.materiel.id == materiel.id && p.variation?.id == variation.id);
            }
            else {
                el = connu.find(p => p.materiel.id == materiel.id);
            }
            if(el == undefined) {
                el = new Inventaire();
                el.materiel = materiel;
                el.variation = variation;
                el.quantite = 0;
            }
            inventaires.push(el);
        };

        for(let materiel of materiels) {
            if(materiel.variations.length > 0) {
                for(let variation of materiel.variations) {
                    addInventaire(materiel, variation);
                }
            }
            else {
                addInventaire(materiel);
            }

        }
        this.inventaires = inventaires;
        return true;
    }

    /**
     * @inheritdoc
     */
    public override configure(): Aventus.Asyncable<Aventus.Navigation.Page.PageConfig> {
        return {};
    }


    /**
     * 
     */
    protected async editItem() {
        const result = await EquipeEditModal.open(this.item);
        if(result) {
            Watcher.trigger("UPDATED", this.item);
        }
    }
    /**
    * 
    */
    protected async deleteItem() {
        const result = await Confirm.open({
            title: "Confirmation de suppression",
            content: "Êtes-vous sûr de vouloir supprimer cette équipe?"
        });

        if(result) {
            await EquipeRAM.getInstance().delete(this.item);
            Main.instance.navigate("/", { replace: true });
        }
    }

    /**
     * 
     */
    protected search() {
        const txt = this.searchEl.value;
        for(let item of this.listItems) {
            if(StringTools.contains(item.inventaire.materiel.nom, txt)) {
                item.style.display = "";
            }
            else if(StringTools.contains(item.inventaire.variation?.nom, txt)) {
                item.style.display = "";
            }
            else {
                item.style.display = "none";
            }
        }
    }

    //#endregion

}