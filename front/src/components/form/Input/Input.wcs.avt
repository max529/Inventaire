@import '@functions';

:host {
	--input-color: color-mix(in srgb, var(--color-base-content)20%, #0000);
	color: var(--color-base-content);
	width: 100%;

	.label {
		cursor: pointer;
		display: block;
		font-size: calc(var(--font-size) * 0.85);
		margin-bottom: 6px;
	}

	.input {
		background-color: var(--color-base-100);
		border: 1px solid var(--input-color);
		border-end-end-radius: var(--join-ee, var(--radius-field));
		border-end-start-radius: var(--join-es, var(--radius-field));
		border-start-end-radius: var(--join-se, var(--radius-field));
		border-start-start-radius: var(--join-ss, var(--radius-field));
		box-shadow: 0 1px color-mix(in oklab, var(--input-color)calc(var(--depth)*10%), #0000) inset, 0 -1px oklch(100% 0 0/calc(var(--depth)*.1)) inset;
		cursor: pointer;
		display: flex;
		padding: 0 8px;
		width: 100%;


		input {
			-webkit-appearance: none;
			-moz-appearance: none;
			appearance: none;
			background-color: transparent;
			border: none;
			color: inherit;
			flex-grow: 1;
			font-size: calc(var(--font-size) * 0.95);
			outline: none;
			outline-style: none;
			padding: 8px 0;
		}

		input:-webkit-autofill,
		input:-webkit-autofill:hover,
		input:-webkit-autofill:focus,
		input:-webkit-autofill:active {
			-webkit-box-shadow: 0 0 0 30px var(--color-base-100) inset !important;
			-webkit-text-fill-color: var(--color-base-content);
		}

		input::placeholder {
			color: color-mix(in srgb, var(--color-base-content)20%, transparent);
		}
	}

	.errors {
		color: var(--color-error);
		font-size: calc(var(--font-size) * 0.8);
		margin-top: 6px;
	}
}

:host(:not([label])),
:host([label=""]) {
	.label {
		display: none;
	}
}

:host(:not([has_errors])) {
	.errors {
		display: none;
	}
}

:host([disabled]) {
	.input {
		input {
			background-color: var(--color-base-200);
			border-color: var(--color-base-200);
			box-shadow: none;
			color: color-mix(in srgb, var(--color-base-content)40%, transparent);
			cursor: not-allowed;
		}
	}
}

@supports (color: color-mix(in lab, red, red)) {
	:host {
		--input-color: color-mix(in oklab, var(--color-base-content)20%, #0000);

		.input {
			input::placeholder {
				color: color-mix(in oklab, var(--color-base-content)20%, transparent);
			}
		}
	}

	:host([disabled]) {
		.input {
			input {
				color: color-mix(in oklab, var(--color-base-content)40%, transparent);
			}
		}
	}
}

@include eachColor using ($color) {

	:host([color="#{$color}"]),
	:host([color="#{$color}"]):focus,
	:host([color="#{$color}"]):focus-within {
		--input-color: var(--color-#{$color});
	}
}
